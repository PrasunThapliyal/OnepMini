//-----------------------------------------------------------------------------
// <copyright file="NodeIdentity.generated.cs" company="Ciena Corporation"\>
//     Copyright (c) Ciena Corporation. All rights reserved.
// </copyright\>
//
// This file was generated by a tool. Do not make modifications to this file.
//
//-----------------------------------------------------------------------------

namespace OnepMini.V1.Common
{
    using System;
    using System.Collections.ObjectModel;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.ComponentModel.DataAnnotations;
    using System.Runtime.CompilerServices;
    using System.Runtime.Serialization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    /// <summary>NodeIdentity</summary>
    public partial class NodeIdentity
    {
        private string _clli;
        private long? _nodeId;
        private string _tid;
        private string _siteName;
        private string _ncId;
        private string _productType;
        private string _siteId;
        private string _siteAddress;

    	/// <summary>
        /// Initializes a new instance of the <see cref="NodeIdentity"/> class.
        /// </summary>
        public NodeIdentity()
    	{
        }

        [System.Runtime.Serialization.IgnoreDataMember]
        [JsonIgnore]
        public virtual long OId { get; set; }


        /// <summary>Common language location identifier.</summary>
        [JsonProperty("clli", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public virtual string Clli
        {
            get { return _clli; }
            set 
            {
                if (_clli != value)
                {
                    _clli = value; 
                }
            }
        }

        /// <summary>ROADM node id.</summary>
        [JsonProperty("nodeId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public virtual long? NodeId
        {
            get { return _nodeId; }
            set 
            {
                if (_nodeId != value)
                {
                    _nodeId = value; 
                }
            }
        }

        /// <summary>Unique NE name.</summary>
        [JsonProperty("tid", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public virtual string Tid
        {
            get { return _tid; }
            set 
            {
                if (_tid != value)
                {
                    _tid = value; 
                }
            }
        }

        /// <summary>Site Name</summary>
        [JsonProperty("siteName", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public virtual string SiteName
        {
            get { return _siteName; }
            set 
            {
                if (_siteName != value)
                {
                    _siteName = value; 
                }
            }
        }

        /// <summary>Network construct Id.</summary>
        [JsonProperty("ncId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public virtual string NcId
        {
            get { return _ncId; }
            set 
            {
                if (_ncId != value)
                {
                    _ncId = value; 
                }
            }
        }

        /// <summary>Product Type, eg 6500</summary>
        [JsonProperty("productType", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public virtual string ProductType
        {
            get { return _productType; }
            set 
            {
                if (_productType != value)
                {
                    _productType = value; 
                }
            }
        }

        /// <summary>Site id</summary>
        [JsonProperty("siteId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public virtual string SiteId
        {
            get { return _siteId; }
            set 
            {
                if (_siteId != value)
                {
                    _siteId = value; 
                }
            }
        }

        /// <summary>Site address</summary>
        [JsonProperty("siteAddress", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public virtual string SiteAddress
        {
            get { return _siteAddress; }
            set 
            {
                if (_siteAddress != value)
                {
                    _siteAddress = value; 
                }
            }
        }


    }
}
//-----------------------------------------------------------------------------
// <copyright file="LocationAddress.generated.cs" company="Ciena Corporation"\>
//     Copyright (c) Ciena Corporation. All rights reserved.
// </copyright\>
//
// This file was generated by a tool. Do not make modifications to this file.
//
//-----------------------------------------------------------------------------

namespace OnepMini.V1.Common
{
    using System;
    using System.Collections.ObjectModel;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.ComponentModel.DataAnnotations;
    using System.Runtime.CompilerServices;
    using System.Runtime.Serialization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    /// <summary>LocationAddress</summary>
    public partial class LocationAddress
    {
        private KeyTypes _key;
        private string _value;
        private string _pattern;

    	/// <summary>
        /// Initializes a new instance of the <see cref="LocationAddress"/> class.
        /// </summary>
        public LocationAddress()
    	{
        }

        [System.Runtime.Serialization.IgnoreDataMember]
        [JsonIgnore]
        public virtual long OId { get; set; }

        /// <summary>KeyTypes</summary>
        public enum KeyTypes
        {
        #pragma warning disable 1591
             [EnumMember(Value = "RACK")]
        	 RACK, 
             [EnumMember(Value = "SHELF")]
        	 SHELF, 
             [EnumMember(Value = "PHYSICAL_SHELF")]
        	 PHYSICAL_SHELF, 
             [EnumMember(Value = "SLOT")]
        	 SLOT, 
             [EnumMember(Value = "SUBSLOT")]
        	 SUBSLOT, 
             [EnumMember(Value = "SUBSUBSLOT")]
        	 SUBSUBSLOT, 
             [EnumMember(Value = "PORT")]
        	 PORT, 
             [EnumMember(Value = "SUBPORT")]
        	 SUBPORT, 
        #pragma warning restore 1591
        }



        /// <summary>Location attribute type</summary>
        [JsonConverter(typeof(StringEnumConverter))]
        [JsonProperty("key", Required = Required.Always)]
        public virtual KeyTypes Key
        {
            get { return _key; }
            set 
            {
                if (_key != value)
                {
                    _key = value; 
                }
            }
        }

        /// <summary>value</summary>
        [JsonProperty("value", Required = Required.Always)]
        public virtual string Value
        {
            get { return _value; }
            set 
            {
                if (_value != value)
                {
                    _value = value; 
                }
            }
        }

        /// <summary>Optional regex or delimiter value to parse multi-valued subslot string</summary>
        [JsonProperty("pattern", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public virtual string Pattern
        {
            get { return _pattern; }
            set 
            {
                if (_pattern != value)
                {
                    _pattern = value; 
                }
            }
        }


    }
}
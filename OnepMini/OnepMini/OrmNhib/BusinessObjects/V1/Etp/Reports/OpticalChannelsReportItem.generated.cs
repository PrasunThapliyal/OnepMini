//-----------------------------------------------------------------------------
// <copyright file="OpticalChannelsReportItem.generated.cs" company="Ciena Corporation"\>
//     Copyright (c) Ciena Corporation. All rights reserved.
// </copyright\>
//
// This file was generated by a tool. Do not make modifications to this file.
//
//-----------------------------------------------------------------------------

namespace TopologyRestLibrary.V1.Etp.Reports
{
    using System;
    using System.Collections.ObjectModel;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.ComponentModel.DataAnnotations;
    using System.Runtime.CompilerServices;
    using System.Runtime.Serialization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    /// <summary>Optical Channel Properties</summary>
    public partial class OpticalChannelsReportItem
    {
        private string _ochPair;
        private string _ochPairStatus;
        private string _ochID;
        private string _ochStatus;
        private string _receiverOSNRMargin;
        private string _photonicSncId;
        private string _photonicSncName;
        private string _sourceSite;
        private string _destinationSite;
        private string _sourceNetworkElement;
        private string _destinationNetworkElement;
        private string _frequency;
        private string _wavelength;
        private string _lowFrequencyGuardBand;
        private string _highFrequencyGuardBand;
        private string _minimumSpectralOccupancy;
        private string _baudRate;
        private string _netBias;
        private string _sourceAdjTxType;
        private string _destinationAdjTxType;
        private string _sourceDWDMInterface;
        private string _destinationDWDMInterface;
        private string _sourcePEC;
        private string _destinationPEC;
        private string _modulationClass;
        private string _pathLength;
        private string _pmdMean;
        private string _amplifiedSpanCount;
        private string _fiberLatency;
        private string _selectedSourceCMDType;
        private string _selectedDestinationCMDType;
        private string _selectedSourceAddDrop;
        private string _selectedDestinationAddDrop;
        private string _selectedSourceCMDAID;
        private string _selectedDestinationCMDAID;
        private string _selectedSourceCMDPort;
        private string _selectedDestinationCMDPort;
        private string _preferredLineCard;
        private string _receiverDispersionMin;
        private string _receiverDispersionMax;
        private string _lowDispersionMargin;
        private string _highDispersionMargin;
        private string _optimumDispersionShift;
        private string _dispersionShiftFiberType;
        private string _txPreCompMode;
        private string _txPreCompModeValue;
        private string _rmsPDL;
        private string _adjustedReceiverOSNR;
        private string _simulatedOSNR;
        private string _receiverPower;
        private string _receiverPowerMinMargin;
        private string _receiverPowerMaxMargin;
        private string _transmitterPowerReduction;
        private string _protected;
        private string _path;
        private string _dispersion;
        private string _e2pn;
        private string _fastValidationStatus;
        private string _measuredCd;
        private string _measuredPmd;
        private string _omsCount;
        private string _otsCount;
        private string _traversedOms;
        private string _verificationPath;
        private IList<string> _failureReasonIds;
        private string _modellingStatus;
        private string _measuredLatency;
        private string _measuredPreFECBER;
        private string _measuredQ;

        /// <summary>
        /// Initializes a new instance of the <see cref="OpticalChannelsReportItem"/> class.
        /// </summary>
        public OpticalChannelsReportItem()
        {
            _failureReasonIds = new List<string>();

        }

        [System.Runtime.Serialization.IgnoreDataMember]
        [JsonIgnore]
        public virtual long OId { get; set; }


        /// <summary>Pair of Optical Channels</summary>
        [JsonProperty("ochPair", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public virtual string OchPair
        {
            get { return _ochPair; }
            set 
            {
                if (_ochPair != value)
                {
                    _ochPair = value; 
                }
            }
        }

        /// <summary>Optical Channels Pair Status</summary>
        [JsonProperty("ochPairStatus", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public virtual string OchPairStatus
        {
            get { return _ochPairStatus; }
            set 
            {
                if (_ochPairStatus != value)
                {
                    _ochPairStatus = value; 
                }
            }
        }

        /// <summary>Optical Channel ID</summary>
        [JsonProperty("ochID", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public virtual string OchID
        {
            get { return _ochID; }
            set 
            {
                if (_ochID != value)
                {
                    _ochID = value; 
                }
            }
        }

        /// <summary>Optical Channel Status</summary>
        [JsonProperty("ochStatus", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public virtual string OchStatus
        {
            get { return _ochStatus; }
            set 
            {
                if (_ochStatus != value)
                {
                    _ochStatus = value; 
                }
            }
        }

        /// <summary>Receiver OSNR Margin (dB)</summary>
        [JsonProperty("receiverOSNRMargin", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public virtual string ReceiverOSNRMargin
        {
            get { return _receiverOSNRMargin; }
            set 
            {
                if (_receiverOSNRMargin != value)
                {
                    _receiverOSNRMargin = value; 
                }
            }
        }

        /// <summary>Photonic Service Id</summary>
        [JsonProperty("photonicSncId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public virtual string PhotonicSncId
        {
            get { return _photonicSncId; }
            set 
            {
                if (_photonicSncId != value)
                {
                    _photonicSncId = value; 
                }
            }
        }

        /// <summary>Photonic Service Name</summary>
        [JsonProperty("photonicSncName", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public virtual string PhotonicSncName
        {
            get { return _photonicSncName; }
            set 
            {
                if (_photonicSncName != value)
                {
                    _photonicSncName = value; 
                }
            }
        }

        /// <summary>Source Site Name</summary>
        [JsonProperty("sourceSite", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public virtual string SourceSite
        {
            get { return _sourceSite; }
            set 
            {
                if (_sourceSite != value)
                {
                    _sourceSite = value; 
                }
            }
        }

        /// <summary>Destination Site Name</summary>
        [JsonProperty("destinationSite", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public virtual string DestinationSite
        {
            get { return _destinationSite; }
            set 
            {
                if (_destinationSite != value)
                {
                    _destinationSite = value; 
                }
            }
        }

        /// <summary>Source Network Element</summary>
        [JsonProperty("sourceNetworkElement", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public virtual string SourceNetworkElement
        {
            get { return _sourceNetworkElement; }
            set 
            {
                if (_sourceNetworkElement != value)
                {
                    _sourceNetworkElement = value; 
                }
            }
        }

        /// <summary>Destination Network Element</summary>
        [JsonProperty("destinationNetworkElement", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public virtual string DestinationNetworkElement
        {
            get { return _destinationNetworkElement; }
            set 
            {
                if (_destinationNetworkElement != value)
                {
                    _destinationNetworkElement = value; 
                }
            }
        }

        /// <summary>Frequency in THz</summary>
        [JsonProperty("frequency", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public virtual string Frequency
        {
            get { return _frequency; }
            set 
            {
                if (_frequency != value)
                {
                    _frequency = value; 
                }
            }
        }

        /// <summary>Wavelength in nm</summary>
        [JsonProperty("wavelength", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public virtual string Wavelength
        {
            get { return _wavelength; }
            set 
            {
                if (_wavelength != value)
                {
                    _wavelength = value; 
                }
            }
        }

        /// <summary>Low Frequency Guard-band (GHz)</summary>
        [JsonProperty("lowFrequencyGuardBand", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public virtual string LowFrequencyGuardBand
        {
            get { return _lowFrequencyGuardBand; }
            set 
            {
                if (_lowFrequencyGuardBand != value)
                {
                    _lowFrequencyGuardBand = value; 
                }
            }
        }

        /// <summary>High Frequency Guard-band (GHz)</summary>
        [JsonProperty("highFrequencyGuardBand", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public virtual string HighFrequencyGuardBand
        {
            get { return _highFrequencyGuardBand; }
            set 
            {
                if (_highFrequencyGuardBand != value)
                {
                    _highFrequencyGuardBand = value; 
                }
            }
        }

        /// <summary>Minimum Spectral Occupancy (GHz)</summary>
        [JsonProperty("minimumSpectralOccupancy", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public virtual string MinimumSpectralOccupancy
        {
            get { return _minimumSpectralOccupancy; }
            set 
            {
                if (_minimumSpectralOccupancy != value)
                {
                    _minimumSpectralOccupancy = value; 
                }
            }
        }

        /// <summary>Baud Rate (Gbd/s)</summary>
        [JsonProperty("baudRate", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public virtual string BaudRate
        {
            get { return _baudRate; }
            set 
            {
                if (_baudRate != value)
                {
                    _baudRate = value; 
                }
            }
        }

        /// <summary>Net Bias (dB)</summary>
        [JsonProperty("netBias", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public virtual string NetBias
        {
            get { return _netBias; }
            set 
            {
                if (_netBias != value)
                {
                    _netBias = value; 
                }
            }
        }

        /// <summary>Source Adjacency Tx Type</summary>
        [JsonProperty("sourceAdjTxType", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public virtual string SourceAdjTxType
        {
            get { return _sourceAdjTxType; }
            set 
            {
                if (_sourceAdjTxType != value)
                {
                    _sourceAdjTxType = value; 
                }
            }
        }

        /// <summary>Destination Adjacency Tx Type</summary>
        [JsonProperty("destinationAdjTxType", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public virtual string DestinationAdjTxType
        {
            get { return _destinationAdjTxType; }
            set 
            {
                if (_destinationAdjTxType != value)
                {
                    _destinationAdjTxType = value; 
                }
            }
        }

        /// <summary>Source DWDM Interface</summary>
        [JsonProperty("sourceDWDMInterface", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public virtual string SourceDWDMInterface
        {
            get { return _sourceDWDMInterface; }
            set 
            {
                if (_sourceDWDMInterface != value)
                {
                    _sourceDWDMInterface = value; 
                }
            }
        }

        /// <summary>Destination DWDM Interface</summary>
        [JsonProperty("destinationDWDMInterface", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public virtual string DestinationDWDMInterface
        {
            get { return _destinationDWDMInterface; }
            set 
            {
                if (_destinationDWDMInterface != value)
                {
                    _destinationDWDMInterface = value; 
                }
            }
        }

        /// <summary>Source PEC</summary>
        [JsonProperty("sourcePEC", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public virtual string SourcePEC
        {
            get { return _sourcePEC; }
            set 
            {
                if (_sourcePEC != value)
                {
                    _sourcePEC = value; 
                }
            }
        }

        /// <summary>Destination PEC</summary>
        [JsonProperty("destinationPEC", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public virtual string DestinationPEC
        {
            get { return _destinationPEC; }
            set 
            {
                if (_destinationPEC != value)
                {
                    _destinationPEC = value; 
                }
            }
        }

        /// <summary>Modulation Class</summary>
        [JsonProperty("modulationClass", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public virtual string ModulationClass
        {
            get { return _modulationClass; }
            set 
            {
                if (_modulationClass != value)
                {
                    _modulationClass = value; 
                }
            }
        }

        /// <summary>Path Length</summary>
        [JsonProperty("pathLength", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public virtual string PathLength
        {
            get { return _pathLength; }
            set 
            {
                if (_pathLength != value)
                {
                    _pathLength = value; 
                }
            }
        }

        /// <summary>PMD Mean (ps)</summary>
        [JsonProperty("pmdMean", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public virtual string PmdMean
        {
            get { return _pmdMean; }
            set 
            {
                if (_pmdMean != value)
                {
                    _pmdMean = value; 
                }
            }
        }

        /// <summary>Amplified Span Count</summary>
        [JsonProperty("amplifiedSpanCount", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public virtual string AmplifiedSpanCount
        {
            get { return _amplifiedSpanCount; }
            set 
            {
                if (_amplifiedSpanCount != value)
                {
                    _amplifiedSpanCount = value; 
                }
            }
        }

        /// <summary>Fiber Latency (us)</summary>
        [JsonProperty("fiberLatency", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public virtual string FiberLatency
        {
            get { return _fiberLatency; }
            set 
            {
                if (_fiberLatency != value)
                {
                    _fiberLatency = value; 
                }
            }
        }

        /// <summary>Selected Source CMD Type</summary>
        [JsonProperty("selectedSourceCMDType", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public virtual string SelectedSourceCMDType
        {
            get { return _selectedSourceCMDType; }
            set 
            {
                if (_selectedSourceCMDType != value)
                {
                    _selectedSourceCMDType = value; 
                }
            }
        }

        /// <summary>Selected Destination CMD Type</summary>
        [JsonProperty("selectedDestinationCMDType", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public virtual string SelectedDestinationCMDType
        {
            get { return _selectedDestinationCMDType; }
            set 
            {
                if (_selectedDestinationCMDType != value)
                {
                    _selectedDestinationCMDType = value; 
                }
            }
        }

        /// <summary>Selected Source Add Drop</summary>
        [JsonProperty("selectedSourceAddDrop", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public virtual string SelectedSourceAddDrop
        {
            get { return _selectedSourceAddDrop; }
            set 
            {
                if (_selectedSourceAddDrop != value)
                {
                    _selectedSourceAddDrop = value; 
                }
            }
        }

        /// <summary>Selected Destination Add Drop</summary>
        [JsonProperty("selectedDestinationAddDrop", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public virtual string SelectedDestinationAddDrop
        {
            get { return _selectedDestinationAddDrop; }
            set 
            {
                if (_selectedDestinationAddDrop != value)
                {
                    _selectedDestinationAddDrop = value; 
                }
            }
        }

        /// <summary>Selected Source CMD AID</summary>
        [JsonProperty("selectedSourceCMDAID", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public virtual string SelectedSourceCMDAID
        {
            get { return _selectedSourceCMDAID; }
            set 
            {
                if (_selectedSourceCMDAID != value)
                {
                    _selectedSourceCMDAID = value; 
                }
            }
        }

        /// <summary>Selected Destination CMD AID</summary>
        [JsonProperty("selectedDestinationCMDAID", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public virtual string SelectedDestinationCMDAID
        {
            get { return _selectedDestinationCMDAID; }
            set 
            {
                if (_selectedDestinationCMDAID != value)
                {
                    _selectedDestinationCMDAID = value; 
                }
            }
        }

        /// <summary>Selected Source CMD Port</summary>
        [JsonProperty("selectedSourceCMDPort", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public virtual string SelectedSourceCMDPort
        {
            get { return _selectedSourceCMDPort; }
            set 
            {
                if (_selectedSourceCMDPort != value)
                {
                    _selectedSourceCMDPort = value; 
                }
            }
        }

        /// <summary>Selected Destination CMD Port</summary>
        [JsonProperty("selectedDestinationCMDPort", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public virtual string SelectedDestinationCMDPort
        {
            get { return _selectedDestinationCMDPort; }
            set 
            {
                if (_selectedDestinationCMDPort != value)
                {
                    _selectedDestinationCMDPort = value; 
                }
            }
        }

        /// <summary>Preferred Line Card</summary>
        [JsonProperty("preferredLineCard", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public virtual string PreferredLineCard
        {
            get { return _preferredLineCard; }
            set 
            {
                if (_preferredLineCard != value)
                {
                    _preferredLineCard = value; 
                }
            }
        }

        /// <summary>Receiver Dispersion Min (ps/nm)</summary>
        [JsonProperty("receiverDispersionMin", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public virtual string ReceiverDispersionMin
        {
            get { return _receiverDispersionMin; }
            set 
            {
                if (_receiverDispersionMin != value)
                {
                    _receiverDispersionMin = value; 
                }
            }
        }

        /// <summary>Receiver Dispersion Max (ps/nm)</summary>
        [JsonProperty("receiverDispersionMax", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public virtual string ReceiverDispersionMax
        {
            get { return _receiverDispersionMax; }
            set 
            {
                if (_receiverDispersionMax != value)
                {
                    _receiverDispersionMax = value; 
                }
            }
        }

        /// <summary>Low Dispersion Margin (dB)</summary>
        [JsonProperty("lowDispersionMargin", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public virtual string LowDispersionMargin
        {
            get { return _lowDispersionMargin; }
            set 
            {
                if (_lowDispersionMargin != value)
                {
                    _lowDispersionMargin = value; 
                }
            }
        }

        /// <summary>High Dispersion Margin (dB)</summary>
        [JsonProperty("highDispersionMargin", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public virtual string HighDispersionMargin
        {
            get { return _highDispersionMargin; }
            set 
            {
                if (_highDispersionMargin != value)
                {
                    _highDispersionMargin = value; 
                }
            }
        }

        /// <summary>Optimum Dispersion Shift (km)</summary>
        [JsonProperty("optimumDispersionShift", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public virtual string OptimumDispersionShift
        {
            get { return _optimumDispersionShift; }
            set 
            {
                if (_optimumDispersionShift != value)
                {
                    _optimumDispersionShift = value; 
                }
            }
        }

        /// <summary>Dispersion Shift Fiber Type</summary>
        [JsonProperty("dispersionShiftFiberType", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public virtual string DispersionShiftFiberType
        {
            get { return _dispersionShiftFiberType; }
            set 
            {
                if (_dispersionShiftFiberType != value)
                {
                    _dispersionShiftFiberType = value; 
                }
            }
        }

        /// <summary>Tx Pre Comp Mode</summary>
        [JsonProperty("txPreCompMode", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public virtual string TxPreCompMode
        {
            get { return _txPreCompMode; }
            set 
            {
                if (_txPreCompMode != value)
                {
                    _txPreCompMode = value; 
                }
            }
        }

        /// <summary>Tx Pre Comp Mode Value (ps/nm)</summary>
        [JsonProperty("txPreCompModeValue", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public virtual string TxPreCompModeValue
        {
            get { return _txPreCompModeValue; }
            set 
            {
                if (_txPreCompModeValue != value)
                {
                    _txPreCompModeValue = value; 
                }
            }
        }

        /// <summary>RMS PDL (dB)</summary>
        [JsonProperty("rmsPDL", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public virtual string RmsPDL
        {
            get { return _rmsPDL; }
            set 
            {
                if (_rmsPDL != value)
                {
                    _rmsPDL = value; 
                }
            }
        }

        /// <summary>Adjusted Receiver OSNR</summary>
        [JsonProperty("adjustedReceiverOSNR", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public virtual string AdjustedReceiverOSNR
        {
            get { return _adjustedReceiverOSNR; }
            set 
            {
                if (_adjustedReceiverOSNR != value)
                {
                    _adjustedReceiverOSNR = value; 
                }
            }
        }

        /// <summary>Simulated OSNR</summary>
        [JsonProperty("simulatedOSNR", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public virtual string SimulatedOSNR
        {
            get { return _simulatedOSNR; }
            set 
            {
                if (_simulatedOSNR != value)
                {
                    _simulatedOSNR = value; 
                }
            }
        }

        /// <summary>Receiver Power (dBm)</summary>
        [JsonProperty("receiverPower", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public virtual string ReceiverPower
        {
            get { return _receiverPower; }
            set 
            {
                if (_receiverPower != value)
                {
                    _receiverPower = value; 
                }
            }
        }

        /// <summary>Receiver Power Min Margin (dBm)</summary>
        [JsonProperty("receiverPowerMinMargin", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public virtual string ReceiverPowerMinMargin
        {
            get { return _receiverPowerMinMargin; }
            set 
            {
                if (_receiverPowerMinMargin != value)
                {
                    _receiverPowerMinMargin = value; 
                }
            }
        }

        /// <summary>Receiver Power Max Margin (dBm)</summary>
        [JsonProperty("receiverPowerMaxMargin", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public virtual string ReceiverPowerMaxMargin
        {
            get { return _receiverPowerMaxMargin; }
            set 
            {
                if (_receiverPowerMaxMargin != value)
                {
                    _receiverPowerMaxMargin = value; 
                }
            }
        }

        /// <summary>Transmitter Power Reduction (dB)</summary>
        [JsonProperty("transmitterPowerReduction", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public virtual string TransmitterPowerReduction
        {
            get { return _transmitterPowerReduction; }
            set 
            {
                if (_transmitterPowerReduction != value)
                {
                    _transmitterPowerReduction = value; 
                }
            }
        }

        /// <summary>protected</summary>
        [JsonProperty("protected", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public virtual string Protected
        {
            get { return _protected; }
            set 
            {
                if (_protected != value)
                {
                    _protected = value; 
                }
            }
        }

        /// <summary>Path</summary>
        [JsonProperty("path", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public virtual string Path
        {
            get { return _path; }
            set 
            {
                if (_path != value)
                {
                    _path = value; 
                }
            }
        }

        /// <summary>Dispersion</summary>
        [JsonProperty("dispersion", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public virtual string Dispersion
        {
            get { return _dispersion; }
            set 
            {
                if (_dispersion != value)
                {
                    _dispersion = value; 
                }
            }
        }

        /// <summary>E2PN</summary>
        [JsonProperty("e2pn", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public virtual string E2pn
        {
            get { return _e2pn; }
            set 
            {
                if (_e2pn != value)
                {
                    _e2pn = value; 
                }
            }
        }

        /// <summary>Fast Validation Status</summary>
        [JsonProperty("fastValidationStatus", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public virtual string FastValidationStatus
        {
            get { return _fastValidationStatus; }
            set 
            {
                if (_fastValidationStatus != value)
                {
                    _fastValidationStatus = value; 
                }
            }
        }

        /// <summary>Measured CD</summary>
        [JsonProperty("measuredCd", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public virtual string MeasuredCd
        {
            get { return _measuredCd; }
            set 
            {
                if (_measuredCd != value)
                {
                    _measuredCd = value; 
                }
            }
        }

        /// <summary>Measured PMD</summary>
        [JsonProperty("measuredPmd", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public virtual string MeasuredPmd
        {
            get { return _measuredPmd; }
            set 
            {
                if (_measuredPmd != value)
                {
                    _measuredPmd = value; 
                }
            }
        }

        /// <summary>OMS Count</summary>
        [JsonProperty("omsCount", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public virtual string OmsCount
        {
            get { return _omsCount; }
            set 
            {
                if (_omsCount != value)
                {
                    _omsCount = value; 
                }
            }
        }

        /// <summary>OTS Count</summary>
        [JsonProperty("otsCount", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public virtual string OtsCount
        {
            get { return _otsCount; }
            set 
            {
                if (_otsCount != value)
                {
                    _otsCount = value; 
                }
            }
        }

        /// <summary>Traversed OMS</summary>
        [JsonProperty("traversedOms", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public virtual string TraversedOms
        {
            get { return _traversedOms; }
            set 
            {
                if (_traversedOms != value)
                {
                    _traversedOms = value; 
                }
            }
        }

        /// <summary>Verification Path</summary>
        [JsonProperty("verificationPath", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public virtual string VerificationPath
        {
            get { return _verificationPath; }
            set 
            {
                if (_verificationPath != value)
                {
                    _verificationPath = value; 
                }
            }
        }

        /// <summary>Failure Reason Ids</summary>
        [JsonProperty("failureReasonIds", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public virtual IList<string> FailureReasonIds
        {
            get { return _failureReasonIds; }
            set 
            {
                if (_failureReasonIds != value)
                {
                    _failureReasonIds = value; 
                }
            }
        }

        /// <summary>VP grid modelling status</summary>
        [JsonProperty("modellingStatus", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public virtual string ModellingStatus
        {
            get { return _modellingStatus; }
            set 
            {
                if (_modellingStatus != value)
                {
                    _modellingStatus = value; 
                }
            }
        }

        /// <summary>Measured Latency</summary>
        [JsonProperty("measuredLatency", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public virtual string MeasuredLatency
        {
            get { return _measuredLatency; }
            set 
            {
                if (_measuredLatency != value)
                {
                    _measuredLatency = value; 
                }
            }
        }

        /// <summary>Measured Pre-FEC BER</summary>
        [JsonProperty("measuredPreFECBER", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public virtual string MeasuredPreFECBER
        {
            get { return _measuredPreFECBER; }
            set 
            {
                if (_measuredPreFECBER != value)
                {
                    _measuredPreFECBER = value; 
                }
            }
        }

        /// <summary>Measured Q</summary>
        [JsonProperty("measuredQ", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public virtual string MeasuredQ
        {
            get { return _measuredQ; }
            set 
            {
                if (_measuredQ != value)
                {
                    _measuredQ = value; 
                }
            }
        }


    }
}
//-----------------------------------------------------------------------------
// <copyright file="CSAmpProvisioningReportItem.generated.cs" company="Ciena Corporation"\>
//     Copyright (c) Ciena Corporation. All rights reserved.
// </copyright\>
//
// This file was generated by a tool. Do not make modifications to this file.
//
//-----------------------------------------------------------------------------

namespace OnepMini.V1.Etp.Reports
{
    using System;
    using System.Collections.ObjectModel;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.ComponentModel.DataAnnotations;
    using System.Runtime.CompilerServices;
    using System.Runtime.Serialization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    /// <summary>CS Amp Provisioning Report Item</summary>
    public partial class CSAmpProvisioningReportItem
    {
        private string _productType;
        private string _name;
        private string _tid;
        private string _id;
        private string _ampId;
        private string _siteName;
        private string _ampDirection;
        private string _ampOrder;
        private string _ampPackage;
        private string _ampType;
        private string _shelfID;
        private string _slot;
        private string _port;
        private string _peakPowerMode;
        private string _targetPeakPower;
        private string _channelPowerMode;
        private string _targetChannelPower;
        private string _estimatedPeakPower;
        private string _estimatedMaxChannelPower;
        private string _estimatedMinChannelPower;
        private string _gainOffsetMode;
        private string _targetGainOffset;
        private string _gainMode;
        private string _targetGain;
        private string _estimatedGain;
        private string _maxGainAtZeroTilt;
        private string _gainTiltMode;
        private string _targetGainTilt;
        private string _estimatedGainTilt;
        private string _maxTotalOutputPower;
        private string _estimatedTotalOutputPower;
        private string _targetPfib;
        private string _voaMode;
        private string _voaAttenuationMode;
        private string _voaAttenuation;
        private string _switchableAmpProvisioningMode;
        private string _switchableAmpGainMode;
        private string _switchableAmpTopOffsetMode;
        private string _switchableAmpTopOffset;
        private string _maxAllowedTotalPumpPower;
        private string _targetSpanLoss;
        private string _ramanGainMode;
        private string _ramanFiberType;
        private string _ramanGainSetting;
        private string _estimateRamanGain;
        private bool? _isLineAmp;
        private Dictionary<string, decimal> _estimatedOutputPowerTable;
        private string _pfg;
        private string _oscPfibMode;
        private string _oscPfibTarget;
        private string _oscFECMode;
        private string _oscFEC;
        private string _linkPilotOutputEstimatedPower;
        private string _fiberTypeMode;
        private string _fiberType;
        private string _oscPfibEstimate;
        private string _ingressRepairMarginMode;
        private string _ingressRepairMargin;
        private string _fiberTypeOrLabel;
        private string _edfaPfibA;
        private string _edfaPfibB;
        private string _ramanPfibA;
        private string _ramanPfibB;
        private string _edfaInFiberType;
        private string _fiberAEff;
        private string _fiberDispersionCoeff;
        private string _fiberAttenuationCoeff;
        private string _oscPlacementMode;
        private string _oscSFP;
        private string _omsName;
        private string _estimatedTotalPfib;
        private string _targetTotalPfib;
        private string _workingBandType;
        private string _parentEquipmentBandType;
        private string _correspondingWorkingBandId;

    	/// <summary>
        /// Initializes a new instance of the <see cref="CSAmpProvisioningReportItem"/> class.
        /// </summary>
        public CSAmpProvisioningReportItem()
    	{
        }


        /// <summary>productType</summary>
        [JsonProperty("productType", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string ProductType
        {
            get { return _productType; }
            set 
            {
                if (_productType != value)
                {
                    _productType = value; 
                }
            }
        }

        /// <summary>Name</summary>
        [JsonProperty("name", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Name
        {
            get { return _name; }
            set 
            {
                if (_name != value)
                {
                    _name = value; 
                }
            }
        }

        /// <summary>Tid</summary>
        [JsonProperty("tid", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Tid
        {
            get { return _tid; }
            set 
            {
                if (_tid != value)
                {
                    _tid = value; 
                }
            }
        }

        /// <summary>Id</summary>
        [JsonProperty("id", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Id
        {
            get { return _id; }
            set 
            {
                if (_id != value)
                {
                    _id = value; 
                }
            }
        }

        /// <summary>Amp Id</summary>
        [JsonProperty("ampId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string AmpId
        {
            get { return _ampId; }
            set 
            {
                if (_ampId != value)
                {
                    _ampId = value; 
                }
            }
        }

        /// <summary>Site Name</summary>
        [JsonProperty("siteName", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string SiteName
        {
            get { return _siteName; }
            set 
            {
                if (_siteName != value)
                {
                    _siteName = value; 
                }
            }
        }

        /// <summary>Amp Direction</summary>
        [JsonProperty("ampDirection", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string AmpDirection
        {
            get { return _ampDirection; }
            set 
            {
                if (_ampDirection != value)
                {
                    _ampDirection = value; 
                }
            }
        }

        /// <summary>Amp Order</summary>
        [JsonProperty("ampOrder", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string AmpOrder
        {
            get { return _ampOrder; }
            set 
            {
                if (_ampOrder != value)
                {
                    _ampOrder = value; 
                }
            }
        }

        /// <summary>Amp Package</summary>
        [JsonProperty("ampPackage", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string AmpPackage
        {
            get { return _ampPackage; }
            set 
            {
                if (_ampPackage != value)
                {
                    _ampPackage = value; 
                }
            }
        }

        /// <summary>Amp Type</summary>
        [JsonProperty("ampType", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string AmpType
        {
            get { return _ampType; }
            set 
            {
                if (_ampType != value)
                {
                    _ampType = value; 
                }
            }
        }

        /// <summary>Shelf ID</summary>
        [JsonProperty("shelfID", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string ShelfID
        {
            get { return _shelfID; }
            set 
            {
                if (_shelfID != value)
                {
                    _shelfID = value; 
                }
            }
        }

        /// <summary>Slot</summary>
        [JsonProperty("slot", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Slot
        {
            get { return _slot; }
            set 
            {
                if (_slot != value)
                {
                    _slot = value; 
                }
            }
        }

        /// <summary>Port</summary>
        [JsonProperty("port", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Port
        {
            get { return _port; }
            set 
            {
                if (_port != value)
                {
                    _port = value; 
                }
            }
        }

        /// <summary>Peak Power Mode</summary>
        [JsonProperty("peakPowerMode", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string PeakPowerMode
        {
            get { return _peakPowerMode; }
            set 
            {
                if (_peakPowerMode != value)
                {
                    _peakPowerMode = value; 
                }
            }
        }

        /// <summary>Target Peak Power (dBm)</summary>
        [JsonProperty("targetPeakPower", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string TargetPeakPower
        {
            get { return _targetPeakPower; }
            set 
            {
                if (_targetPeakPower != value)
                {
                    _targetPeakPower = value; 
                }
            }
        }

        /// <summary>Channel Power Mode</summary>
        [JsonProperty("channelPowerMode", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string ChannelPowerMode
        {
            get { return _channelPowerMode; }
            set 
            {
                if (_channelPowerMode != value)
                {
                    _channelPowerMode = value; 
                }
            }
        }

        /// <summary>Target Channel Power (dBm)</summary>
        [JsonProperty("targetChannelPower", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string TargetChannelPower
        {
            get { return _targetChannelPower; }
            set 
            {
                if (_targetChannelPower != value)
                {
                    _targetChannelPower = value; 
                }
            }
        }

        /// <summary>Estiated Peak Power (dBm)</summary>
        [JsonProperty("estimatedPeakPower", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string EstimatedPeakPower
        {
            get { return _estimatedPeakPower; }
            set 
            {
                if (_estimatedPeakPower != value)
                {
                    _estimatedPeakPower = value; 
                }
            }
        }

        /// <summary>Estimated Max Channel Power (dBm)</summary>
        [JsonProperty("estimatedMaxChannelPower", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string EstimatedMaxChannelPower
        {
            get { return _estimatedMaxChannelPower; }
            set 
            {
                if (_estimatedMaxChannelPower != value)
                {
                    _estimatedMaxChannelPower = value; 
                }
            }
        }

        /// <summary>Estimated Min Channel Power (dBm)</summary>
        [JsonProperty("estimatedMinChannelPower", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string EstimatedMinChannelPower
        {
            get { return _estimatedMinChannelPower; }
            set 
            {
                if (_estimatedMinChannelPower != value)
                {
                    _estimatedMinChannelPower = value; 
                }
            }
        }

        /// <summary>Gain Offset Mode</summary>
        [JsonProperty("gainOffsetMode", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string GainOffsetMode
        {
            get { return _gainOffsetMode; }
            set 
            {
                if (_gainOffsetMode != value)
                {
                    _gainOffsetMode = value; 
                }
            }
        }

        /// <summary>Target Gain Offset (dB)</summary>
        [JsonProperty("targetGainOffset", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string TargetGainOffset
        {
            get { return _targetGainOffset; }
            set 
            {
                if (_targetGainOffset != value)
                {
                    _targetGainOffset = value; 
                }
            }
        }

        /// <summary>Gain Mode</summary>
        [JsonProperty("gainMode", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string GainMode
        {
            get { return _gainMode; }
            set 
            {
                if (_gainMode != value)
                {
                    _gainMode = value; 
                }
            }
        }

        /// <summary>Target Gain (dB)</summary>
        [JsonProperty("targetGain", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string TargetGain
        {
            get { return _targetGain; }
            set 
            {
                if (_targetGain != value)
                {
                    _targetGain = value; 
                }
            }
        }

        /// <summary>Estimated Gain (dB)</summary>
        [JsonProperty("estimatedGain", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string EstimatedGain
        {
            get { return _estimatedGain; }
            set 
            {
                if (_estimatedGain != value)
                {
                    _estimatedGain = value; 
                }
            }
        }

        /// <summary>Max Gain At Zero Tilt (dB)</summary>
        [JsonProperty("maxGainAtZeroTilt", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string MaxGainAtZeroTilt
        {
            get { return _maxGainAtZeroTilt; }
            set 
            {
                if (_maxGainAtZeroTilt != value)
                {
                    _maxGainAtZeroTilt = value; 
                }
            }
        }

        /// <summary>Gain Tilt Mode</summary>
        [JsonProperty("gainTiltMode", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string GainTiltMode
        {
            get { return _gainTiltMode; }
            set 
            {
                if (_gainTiltMode != value)
                {
                    _gainTiltMode = value; 
                }
            }
        }

        /// <summary>Target Gain Tilt (dB)</summary>
        [JsonProperty("targetGainTilt", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string TargetGainTilt
        {
            get { return _targetGainTilt; }
            set 
            {
                if (_targetGainTilt != value)
                {
                    _targetGainTilt = value; 
                }
            }
        }

        /// <summary>Estimated Gain Tilt (dB)</summary>
        [JsonProperty("estimatedGainTilt", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string EstimatedGainTilt
        {
            get { return _estimatedGainTilt; }
            set 
            {
                if (_estimatedGainTilt != value)
                {
                    _estimatedGainTilt = value; 
                }
            }
        }

        /// <summary>Max Total Output Power (dBm)</summary>
        [JsonProperty("maxTotalOutputPower", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string MaxTotalOutputPower
        {
            get { return _maxTotalOutputPower; }
            set 
            {
                if (_maxTotalOutputPower != value)
                {
                    _maxTotalOutputPower = value; 
                }
            }
        }

        /// <summary>Estimated Total Output Power (dBm)</summary>
        [JsonProperty("estimatedTotalOutputPower", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string EstimatedTotalOutputPower
        {
            get { return _estimatedTotalOutputPower; }
            set 
            {
                if (_estimatedTotalOutputPower != value)
                {
                    _estimatedTotalOutputPower = value; 
                }
            }
        }

        /// <summary>Target PFib (dBm)</summary>
        [JsonProperty("targetPfib", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string TargetPfib
        {
            get { return _targetPfib; }
            set 
            {
                if (_targetPfib != value)
                {
                    _targetPfib = value; 
                }
            }
        }

        /// <summary>VOA Mode</summary>
        [JsonProperty("voaMode", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string VoaMode
        {
            get { return _voaMode; }
            set 
            {
                if (_voaMode != value)
                {
                    _voaMode = value; 
                }
            }
        }

        /// <summary>VOA Attenuation Mode</summary>
        [JsonProperty("voaAttenuationMode", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string VoaAttenuationMode
        {
            get { return _voaAttenuationMode; }
            set 
            {
                if (_voaAttenuationMode != value)
                {
                    _voaAttenuationMode = value; 
                }
            }
        }

        /// <summary>VOA Attenuation</summary>
        [JsonProperty("voaAttenuation", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string VoaAttenuation
        {
            get { return _voaAttenuation; }
            set 
            {
                if (_voaAttenuation != value)
                {
                    _voaAttenuation = value; 
                }
            }
        }

        /// <summary>Switchable Amp Provisioning Mode</summary>
        [JsonProperty("switchableAmpProvisioningMode", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string SwitchableAmpProvisioningMode
        {
            get { return _switchableAmpProvisioningMode; }
            set 
            {
                if (_switchableAmpProvisioningMode != value)
                {
                    _switchableAmpProvisioningMode = value; 
                }
            }
        }

        /// <summary>Switchable Amp Gain Mode</summary>
        [JsonProperty("switchableAmpGainMode", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string SwitchableAmpGainMode
        {
            get { return _switchableAmpGainMode; }
            set 
            {
                if (_switchableAmpGainMode != value)
                {
                    _switchableAmpGainMode = value; 
                }
            }
        }

        /// <summary>Switchable Amp Top Offset Mode</summary>
        [JsonProperty("switchableAmpTopOffsetMode", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string SwitchableAmpTopOffsetMode
        {
            get { return _switchableAmpTopOffsetMode; }
            set 
            {
                if (_switchableAmpTopOffsetMode != value)
                {
                    _switchableAmpTopOffsetMode = value; 
                }
            }
        }

        /// <summary>Switchable Amp Top Offset</summary>
        [JsonProperty("switchableAmpTopOffset", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string SwitchableAmpTopOffset
        {
            get { return _switchableAmpTopOffset; }
            set 
            {
                if (_switchableAmpTopOffset != value)
                {
                    _switchableAmpTopOffset = value; 
                }
            }
        }

        /// <summary>Max Allowed Total Pump Power</summary>
        [JsonProperty("maxAllowedTotalPumpPower", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string MaxAllowedTotalPumpPower
        {
            get { return _maxAllowedTotalPumpPower; }
            set 
            {
                if (_maxAllowedTotalPumpPower != value)
                {
                    _maxAllowedTotalPumpPower = value; 
                }
            }
        }

        /// <summary>Target Span Loss</summary>
        [JsonProperty("targetSpanLoss", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string TargetSpanLoss
        {
            get { return _targetSpanLoss; }
            set 
            {
                if (_targetSpanLoss != value)
                {
                    _targetSpanLoss = value; 
                }
            }
        }

        /// <summary>Raman Gain Mode</summary>
        [JsonProperty("ramanGainMode", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string RamanGainMode
        {
            get { return _ramanGainMode; }
            set 
            {
                if (_ramanGainMode != value)
                {
                    _ramanGainMode = value; 
                }
            }
        }

        /// <summary>Raman Fiber Type</summary>
        [JsonProperty("ramanFiberType", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string RamanFiberType
        {
            get { return _ramanFiberType; }
            set 
            {
                if (_ramanFiberType != value)
                {
                    _ramanFiberType = value; 
                }
            }
        }

        /// <summary>Raman Gain Setting</summary>
        [JsonProperty("ramanGainSetting", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string RamanGainSetting
        {
            get { return _ramanGainSetting; }
            set 
            {
                if (_ramanGainSetting != value)
                {
                    _ramanGainSetting = value; 
                }
            }
        }

        /// <summary>Estimate Raman Gain</summary>
        [JsonProperty("estimateRamanGain", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string EstimateRamanGain
        {
            get { return _estimateRamanGain; }
            set 
            {
                if (_estimateRamanGain != value)
                {
                    _estimateRamanGain = value; 
                }
            }
        }

        /// <summary>Is Line Amp</summary>
        [JsonProperty("isLineAmp", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public bool? IsLineAmp
        {
            get { return _isLineAmp; }
            set 
            {
                if (_isLineAmp != value)
                {
                    _isLineAmp = value; 
                }
            }
        }

        /// <summary>estimatedOutputPowerTable</summary>
        [JsonProperty("estimatedOutputPowerTable", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public Dictionary<string, decimal> EstimatedOutputPowerTable
        {
            get { return _estimatedOutputPowerTable; }
            set 
            {
                if (_estimatedOutputPowerTable != value)
                {
                    _estimatedOutputPowerTable = value; 
                }
            }
        }

        /// <summary>PFG</summary>
        [JsonProperty("pfg", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Pfg
        {
            get { return _pfg; }
            set 
            {
                if (_pfg != value)
                {
                    _pfg = value; 
                }
            }
        }

        /// <summary>OSC Pfib Mode</summary>
        [JsonProperty("oscPfibMode", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string OscPfibMode
        {
            get { return _oscPfibMode; }
            set 
            {
                if (_oscPfibMode != value)
                {
                    _oscPfibMode = value; 
                }
            }
        }

        /// <summary>OSC Pfib Target</summary>
        [JsonProperty("oscPfibTarget", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string OscPfibTarget
        {
            get { return _oscPfibTarget; }
            set 
            {
                if (_oscPfibTarget != value)
                {
                    _oscPfibTarget = value; 
                }
            }
        }

        /// <summary>OSC FEC Mode</summary>
        [JsonProperty("oscFECMode", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string OscFECMode
        {
            get { return _oscFECMode; }
            set 
            {
                if (_oscFECMode != value)
                {
                    _oscFECMode = value; 
                }
            }
        }

        /// <summary>OSC FEC</summary>
        [JsonProperty("oscFEC", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string OscFEC
        {
            get { return _oscFEC; }
            set 
            {
                if (_oscFEC != value)
                {
                    _oscFEC = value; 
                }
            }
        }

        /// <summary>Link Pilot output estimated power</summary>
        [JsonProperty("linkPilotOutputEstimatedPower", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string LinkPilotOutputEstimatedPower
        {
            get { return _linkPilotOutputEstimatedPower; }
            set 
            {
                if (_linkPilotOutputEstimatedPower != value)
                {
                    _linkPilotOutputEstimatedPower = value; 
                }
            }
        }

        /// <summary>Fiber type mode</summary>
        [JsonProperty("fiberTypeMode", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string FiberTypeMode
        {
            get { return _fiberTypeMode; }
            set 
            {
                if (_fiberTypeMode != value)
                {
                    _fiberTypeMode = value; 
                }
            }
        }

        /// <summary>Fiber type</summary>
        [JsonProperty("fiberType", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string FiberType
        {
            get { return _fiberType; }
            set 
            {
                if (_fiberType != value)
                {
                    _fiberType = value; 
                }
            }
        }

        /// <summary>OSC Pfib Estimate</summary>
        [JsonProperty("oscPfibEstimate", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string OscPfibEstimate
        {
            get { return _oscPfibEstimate; }
            set 
            {
                if (_oscPfibEstimate != value)
                {
                    _oscPfibEstimate = value; 
                }
            }
        }

        /// <summary>Ingress Repair Margin mode</summary>
        [JsonProperty("ingressRepairMarginMode", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string IngressRepairMarginMode
        {
            get { return _ingressRepairMarginMode; }
            set 
            {
                if (_ingressRepairMarginMode != value)
                {
                    _ingressRepairMarginMode = value; 
                }
            }
        }

        /// <summary>Ingress Repair Margin</summary>
        [JsonProperty("ingressRepairMargin", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string IngressRepairMargin
        {
            get { return _ingressRepairMargin; }
            set 
            {
                if (_ingressRepairMargin != value)
                {
                    _ingressRepairMargin = value; 
                }
            }
        }

        /// <summary>Fiber Type or Label</summary>
        [JsonProperty("fiberTypeOrLabel", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string FiberTypeOrLabel
        {
            get { return _fiberTypeOrLabel; }
            set 
            {
                if (_fiberTypeOrLabel != value)
                {
                    _fiberTypeOrLabel = value; 
                }
            }
        }

        /// <summary>EDFA Pfib_a</summary>
        [JsonProperty("edfaPfibA", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string EdfaPfibA
        {
            get { return _edfaPfibA; }
            set 
            {
                if (_edfaPfibA != value)
                {
                    _edfaPfibA = value; 
                }
            }
        }

        /// <summary>EDFA Pfib_b</summary>
        [JsonProperty("edfaPfibB", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string EdfaPfibB
        {
            get { return _edfaPfibB; }
            set 
            {
                if (_edfaPfibB != value)
                {
                    _edfaPfibB = value; 
                }
            }
        }

        /// <summary>Raman Pfib_a</summary>
        [JsonProperty("ramanPfibA", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string RamanPfibA
        {
            get { return _ramanPfibA; }
            set 
            {
                if (_ramanPfibA != value)
                {
                    _ramanPfibA = value; 
                }
            }
        }

        /// <summary>Raman Pfib_b</summary>
        [JsonProperty("ramanPfibB", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string RamanPfibB
        {
            get { return _ramanPfibB; }
            set 
            {
                if (_ramanPfibB != value)
                {
                    _ramanPfibB = value; 
                }
            }
        }

        /// <summary>EDFA-in FIber Type</summary>
        [JsonProperty("edfaInFiberType", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string EdfaInFiberType
        {
            get { return _edfaInFiberType; }
            set 
            {
                if (_edfaInFiberType != value)
                {
                    _edfaInFiberType = value; 
                }
            }
        }

        /// <summary>Fiber A_eff</summary>
        [JsonProperty("fiberAEff", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string FiberAEff
        {
            get { return _fiberAEff; }
            set 
            {
                if (_fiberAEff != value)
                {
                    _fiberAEff = value; 
                }
            }
        }

        /// <summary>Fiber Dispersion Coefficient</summary>
        [JsonProperty("fiberDispersionCoeff", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string FiberDispersionCoeff
        {
            get { return _fiberDispersionCoeff; }
            set 
            {
                if (_fiberDispersionCoeff != value)
                {
                    _fiberDispersionCoeff = value; 
                }
            }
        }

        /// <summary>Fiber Attenuation Coefficient</summary>
        [JsonProperty("fiberAttenuationCoeff", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string FiberAttenuationCoeff
        {
            get { return _fiberAttenuationCoeff; }
            set 
            {
                if (_fiberAttenuationCoeff != value)
                {
                    _fiberAttenuationCoeff = value; 
                }
            }
        }

        /// <summary>OSC Placement mode</summary>
        [JsonProperty("oscPlacementMode", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string OscPlacementMode
        {
            get { return _oscPlacementMode; }
            set 
            {
                if (_oscPlacementMode != value)
                {
                    _oscPlacementMode = value; 
                }
            }
        }

        /// <summary>OSC SFP</summary>
        [JsonProperty("oscSFP", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string OscSFP
        {
            get { return _oscSFP; }
            set 
            {
                if (_oscSFP != value)
                {
                    _oscSFP = value; 
                }
            }
        }

        /// <summary>OMS Name</summary>
        [JsonProperty("omsName", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string OmsName
        {
            get { return _omsName; }
            set 
            {
                if (_omsName != value)
                {
                    _omsName = value; 
                }
            }
        }

        /// <summary>Estimated Total Pfib</summary>
        [JsonProperty("estimatedTotalPfib", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string EstimatedTotalPfib
        {
            get { return _estimatedTotalPfib; }
            set 
            {
                if (_estimatedTotalPfib != value)
                {
                    _estimatedTotalPfib = value; 
                }
            }
        }

        /// <summary>Target Total Pfib</summary>
        [JsonProperty("targetTotalPfib", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string TargetTotalPfib
        {
            get { return _targetTotalPfib; }
            set 
            {
                if (_targetTotalPfib != value)
                {
                    _targetTotalPfib = value; 
                }
            }
        }

        /// <summary>working band of ampTp ex- C-Band/L-Band</summary>
        [JsonProperty("workingBandType", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string WorkingBandType
        {
            get { return _workingBandType; }
            set 
            {
                if (_workingBandType != value)
                {
                    _workingBandType = value; 
                }
            }
        }

        /// <summary>band type of parent equipment</summary>
        [JsonProperty("parentEquipmentBandType", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string ParentEquipmentBandType
        {
            get { return _parentEquipmentBandType; }
            set 
            {
                if (_parentEquipmentBandType != value)
                {
                    _parentEquipmentBandType = value; 
                }
            }
        }

        /// <summary>Corresponding working band default id</summary>
        [JsonProperty("correspondingWorkingBandId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string CorrespondingWorkingBandId
        {
            get { return _correspondingWorkingBandId; }
            set 
            {
                if (_correspondingWorkingBandId != value)
                {
                    _correspondingWorkingBandId = value; 
                }
            }
        }


    }
}
//-----------------------------------------------------------------------------
// <copyright file="FibersReportItem.generated.cs" company="Ciena Corporation"\>
//     Copyright (c) Ciena Corporation. All rights reserved.
// </copyright\>
//
// This file was generated by a tool. Do not make modifications to this file.
//
//-----------------------------------------------------------------------------

namespace TopologyRestLibrary.V1.Etp.Reports
{
    using System;
    using System.Collections.ObjectModel;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.ComponentModel.DataAnnotations;
    using System.Runtime.CompilerServices;
    using System.Runtime.Serialization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    /// <summary>Fibers</summary>
    public partial class FibersReportItem
    {
        private string _name;
        private string _fiberId;
        private string _fiberPairString;
        private string _fiberType;
        private string _onepSiteByAEndSite;
        private string _onepSiteByZEndSite;
        private decimal? _fiberLength;
        private decimal? _totalLoss;
        private string _fiberLossSourceType;
        private decimal? _fiberLoss;
        private decimal? _lossPerKm;
        private decimal? _marginDbPerSpan;
        private decimal? _marginDbPerKm;
        private string _marginSourceType;
        private decimal? _headPPL;
        private decimal? _tailPPL;
        private string _pmdType;
        private decimal? _pmdCoefficient;
        private decimal? _pmdMean;

    	/// <summary>
        /// Initializes a new instance of the <see cref="FibersReportItem"/> class.
        /// </summary>
        public FibersReportItem()
    	{
        }


        /// <summary>FiberTL Name</summary>
        [JsonProperty("name", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public virtual string Name
        {
            get { return _name; }
            set 
            {
                if (_name != value)
                {
                    _name = value; 
                }
            }
        }

        /// <summary>Fiber Id</summary>
        [JsonProperty("fiberId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public virtual string FiberId
        {
            get { return _fiberId; }
            set 
            {
                if (_fiberId != value)
                {
                    _fiberId = value; 
                }
            }
        }

        /// <summary>Fiber Pair String</summary>
        [JsonProperty("fiberPairString", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public virtual string FiberPairString
        {
            get { return _fiberPairString; }
            set 
            {
                if (_fiberPairString != value)
                {
                    _fiberPairString = value; 
                }
            }
        }

        /// <summary>FiberType</summary>
        [JsonProperty("fiberType", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public virtual string FiberType
        {
            get { return _fiberType; }
            set 
            {
                if (_fiberType != value)
                {
                    _fiberType = value; 
                }
            }
        }

        /// <summary>Site A</summary>
        [JsonProperty("onepSiteByAEndSite", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public virtual string OnepSiteByAEndSite
        {
            get { return _onepSiteByAEndSite; }
            set 
            {
                if (_onepSiteByAEndSite != value)
                {
                    _onepSiteByAEndSite = value; 
                }
            }
        }

        /// <summary>Site Z</summary>
        [JsonProperty("onepSiteByZEndSite", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public virtual string OnepSiteByZEndSite
        {
            get { return _onepSiteByZEndSite; }
            set 
            {
                if (_onepSiteByZEndSite != value)
                {
                    _onepSiteByZEndSite = value; 
                }
            }
        }

        /// <summary>Fiber Length</summary>
        [JsonProperty("fiberLength", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public virtual decimal? FiberLength
        {
            get { return _fiberLength; }
            set 
            {
                if (_fiberLength != value)
                {
                    _fiberLength = value; 
                }
            }
        }

        /// <summary>Total loss</summary>
        [JsonProperty("totalLoss", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public virtual decimal? TotalLoss
        {
            get { return _totalLoss; }
            set 
            {
                if (_totalLoss != value)
                {
                    _totalLoss = value; 
                }
            }
        }

        /// <summary>Loss Source Type: FromLength or Manual</summary>
        [JsonProperty("fiberLossSourceType", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public virtual string FiberLossSourceType
        {
            get { return _fiberLossSourceType; }
            set 
            {
                if (_fiberLossSourceType != value)
                {
                    _fiberLossSourceType = value; 
                }
            }
        }

        /// <summary>Fiber Loss</summary>
        [JsonProperty("fiberLoss", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public virtual decimal? FiberLoss
        {
            get { return _fiberLoss; }
            set 
            {
                if (_fiberLoss != value)
                {
                    _fiberLoss = value; 
                }
            }
        }

        /// <summary>Fiber Loss Per Km</summary>
        [JsonProperty("lossPerKm", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public virtual decimal? LossPerKm
        {
            get { return _lossPerKm; }
            set 
            {
                if (_lossPerKm != value)
                {
                    _lossPerKm = value; 
                }
            }
        }

        /// <summary>marginDbPerSpan</summary>
        [JsonProperty("marginDbPerSpan", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public virtual decimal? MarginDbPerSpan
        {
            get { return _marginDbPerSpan; }
            set 
            {
                if (_marginDbPerSpan != value)
                {
                    _marginDbPerSpan = value; 
                }
            }
        }

        /// <summary>marginDbPerKm</summary>
        [JsonProperty("marginDbPerKm", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public virtual decimal? MarginDbPerKm
        {
            get { return _marginDbPerKm; }
            set 
            {
                if (_marginDbPerKm != value)
                {
                    _marginDbPerKm = value; 
                }
            }
        }

        /// <summary>Margin Source Type: FromLength or Manual</summary>
        [JsonProperty("marginSourceType", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public virtual string MarginSourceType
        {
            get { return _marginSourceType; }
            set 
            {
                if (_marginSourceType != value)
                {
                    _marginSourceType = value; 
                }
            }
        }

        /// <summary>headPPL</summary>
        [JsonProperty("headPPL", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public virtual decimal? HeadPPL
        {
            get { return _headPPL; }
            set 
            {
                if (_headPPL != value)
                {
                    _headPPL = value; 
                }
            }
        }

        /// <summary>tailPPL</summary>
        [JsonProperty("tailPPL", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public virtual decimal? TailPPL
        {
            get { return _tailPPL; }
            set 
            {
                if (_tailPPL != value)
                {
                    _tailPPL = value; 
                }
            }
        }

        /// <summary>pmdType</summary>
        [JsonProperty("pmdType", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public virtual string PmdType
        {
            get { return _pmdType; }
            set 
            {
                if (_pmdType != value)
                {
                    _pmdType = value; 
                }
            }
        }

        /// <summary>pmdCoefficient</summary>
        [JsonProperty("pmdCoefficient", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public virtual decimal? PmdCoefficient
        {
            get { return _pmdCoefficient; }
            set 
            {
                if (_pmdCoefficient != value)
                {
                    _pmdCoefficient = value; 
                }
            }
        }

        /// <summary>pmdMean</summary>
        [JsonProperty("pmdMean", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public virtual decimal? PmdMean
        {
            get { return _pmdMean; }
            set 
            {
                if (_pmdMean != value)
                {
                    _pmdMean = value; 
                }
            }
        }


    }
}